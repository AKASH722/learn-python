,p,c
0,"Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.[33]","^ Kuhlman, Dave. ""A Python Book: Beginning Python, Advanced Python, and Python Exercises"". Section 1.1. Archived from the original (PDF) on 23 June 2012."
1,"Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a ""batteries included"" language due to its comprehensive standard library.[34][35]","^ ""About Python"". Python Software Foundation. Archived from the original on 20 April 2012. Retrieved 24 April 2012., second section ""Fans of Python use the phrase ""batteries included"" to describe the standard library, which covers everything from asynchronous processing to zip files."""
2,"Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a ""batteries included"" language due to its comprehensive standard library.[34][35]","^ ""PEP 206 – Python Advanced Library"". Python.org. Archived from the original on 5 May 2021. Retrieved 11 October 2021."
3,"Guido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0.[36] Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not completely backward-compatible with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2.[37]","^ Rossum, Guido Van (20 January 2009). ""The History of Python: A Brief Timeline of Python"". The History of Python. Archived from the original on 5 June 2020. Retrieved 5 March 2021."
4,"Guido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0.[36] Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not completely backward-compatible with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2.[37]","^ Peterson, Benjamin (20 April 2020). ""Python 2.7.18, the last release of Python 2"". Python Insider. Archived from the original on 26 April 2020. Retrieved 27 April 2020."
5,"Python consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.[38][39][40][41]","^ ""Stack Overflow Developer Survey 2022"". Stack Overflow. Archived from the original on 27 June 2022. Retrieved 12 August 2022."
6,"Python consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.[38][39][40][41]","^ ""The State of Developer Ecosystem in 2020 Infographic"". JetBrains: Developer Tools for Professionals and Teams. Archived from the original on 1 March 2021. Retrieved 5 March 2021."
7,"Python consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.[38][39][40][41]","^ a b ""TIOBE Index"". TIOBE. Archived from the original on 25 February 2018. Retrieved 3 January 2023. The TIOBE Programming Community index is an indicator of the popularity of programming languages Updated as required."
8,"Python consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.[38][39][40][41]","^ ""PYPL PopularitY of Programming Language index"". pypl.github.io. Archived from the original on 14 March 2017. Retrieved 26 March 2021."
9,"Python was invented in the late 1980s[42] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[43] capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[44] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his ""permanent vacation"" from his responsibilities as Python's ""benevolent dictator for life"" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker[45] (he's since come out of retirement and is self-titled ""BDFL-emeritus""). In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[46][47]","^ a b Venners, Bill (13 January 2003). ""The Making of Python"". Artima Developer. Artima. Archived from the original on 1 September 2016. Retrieved 22 March 2007."
10,"Python was invented in the late 1980s[42] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[43] capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[44] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his ""permanent vacation"" from his responsibilities as Python's ""benevolent dictator for life"" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker[45] (he's since come out of retirement and is self-titled ""BDFL-emeritus""). In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[46][47]","^ van Rossum, Guido (29 August 2000). ""SETL (was: Lukewarm about range literals)"". Python-Dev (Mailing list). Archived from the original on 14 July 2018. Retrieved 13 March 2011."
11,"Python was invented in the late 1980s[42] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[43] capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[44] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his ""permanent vacation"" from his responsibilities as Python's ""benevolent dictator for life"" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker[45] (he's since come out of retirement and is self-titled ""BDFL-emeritus""). In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[46][47]","^ a b ""Why was Python created in the first place?"". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 22 March 2007. I had extensive experience with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and the inclusion of very high-level data types (although the details are all different in Python)."
12,"Python was invented in the late 1980s[42] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[43] capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[44] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his ""permanent vacation"" from his responsibilities as Python's ""benevolent dictator for life"" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker[45] (he's since come out of retirement and is self-titled ""BDFL-emeritus""). In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[46][47]","^ van Rossum, Guido (20 January 2009). ""A Brief Timeline of Python"". The History of Python. Archived from the original on 5 June 2020. Retrieved 20 January 2009."
13,"Python was invented in the late 1980s[42] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[43] capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[44] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his ""permanent vacation"" from his responsibilities as Python's ""benevolent dictator for life"" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker[45] (he's since come out of retirement and is self-titled ""BDFL-emeritus""). In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[46][47]","^ Fairchild, Carlie (12 July 2018). ""Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life"". Linux Journal. Archived from the original on 13 July 2018. Retrieved 13 July 2018."
14,"Python was invented in the late 1980s[42] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[43] capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[44] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his ""permanent vacation"" from his responsibilities as Python's ""benevolent dictator for life"" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker[45] (he's since come out of retirement and is self-titled ""BDFL-emeritus""). In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[46][47]","^ ""PEP 8100"". Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 4 May 2019."
15,"Python was invented in the late 1980s[42] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[43] capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[44] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his ""permanent vacation"" from his responsibilities as Python's ""benevolent dictator for life"" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker[45] (he's since come out of retirement and is self-titled ""BDFL-emeritus""). In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[46][47]","^ ""PEP 13 – Python Language Governance"". Python.org. Archived from the original on 27 May 2021. Retrieved 25 August 2021."
16,"Python 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support.[48] Python 3.0, released on 3 December 2008, with many of its major features backported to Python 2.6.x[49] and 2.7.x. Releases of Python 3 include the 2to3 utility, which automates the translation of Python 2 code to Python 3.[50]","^ Kuchling, A. M.; Zadka, Moshe (16 October 2000). ""What's New in Python 2.0"". Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 11 February 2012."
17,"Python 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support.[48] Python 3.0, released on 3 December 2008, with many of its major features backported to Python 2.6.x[49] and 2.7.x. Releases of Python 3 include the 2to3 utility, which automates the translation of Python 2 code to Python 3.[50]","^ van Rossum, Guido (5 April 2006). ""PEP 3000 – Python 3000"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 3 March 2016. Retrieved 27 June 2009."
18,"Python 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support.[48] Python 3.0, released on 3 December 2008, with many of its major features backported to Python 2.6.x[49] and 2.7.x. Releases of Python 3 include the 2to3 utility, which automates the translation of Python 2 code to Python 3.[50]","^ ""2to3 – Automated Python 2 to 3 code translation"". docs.python.org. Archived from the original on 4 June 2020. Retrieved 2 February 2021."
19,"Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[51][52] No further security patches or other improvements will be released for it.[53][54] Currently only 3.8 and later are supported (2023 security issues were fixed in e.g. 3.7.17, the final 3.7.x release[55]). While Python 2.7 and older is officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. ""2.7.18+"" (plus 3.9 and 3.10), with the plus meaning (at least some) ""backported security updates"".[56]","^ ""PEP 373 – Python 2.7 Release Schedule"". python.org. Archived from the original on 19 May 2020. Retrieved 9 January 2017."
20,"Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[51][52] No further security patches or other improvements will be released for it.[53][54] Currently only 3.8 and later are supported (2023 security issues were fixed in e.g. 3.7.17, the final 3.7.x release[55]). While Python 2.7 and older is officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. ""2.7.18+"" (plus 3.9 and 3.10), with the plus meaning (at least some) ""backported security updates"".[56]","^ ""PEP 466 – Network Security Enhancements for Python 2.7.x"". python.org. Archived from the original on 4 June 2020. Retrieved 9 January 2017."
21,"Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[51][52] No further security patches or other improvements will be released for it.[53][54] Currently only 3.8 and later are supported (2023 security issues were fixed in e.g. 3.7.17, the final 3.7.x release[55]). While Python 2.7 and older is officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. ""2.7.18+"" (plus 3.9 and 3.10), with the plus meaning (at least some) ""backported security updates"".[56]","^ ""Sunsetting Python 2"". Python.org. Archived from the original on 12 January 2020. Retrieved 22 September 2019."
22,"Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[51][52] No further security patches or other improvements will be released for it.[53][54] Currently only 3.8 and later are supported (2023 security issues were fixed in e.g. 3.7.17, the final 3.7.x release[55]). While Python 2.7 and older is officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. ""2.7.18+"" (plus 3.9 and 3.10), with the plus meaning (at least some) ""backported security updates"".[56]","^ ""PEP 373 – Python 2.7 Release Schedule"". Python.org. Archived from the original on 13 January 2020. Retrieved 22 September 2019."
23,"Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[51][52] No further security patches or other improvements will be released for it.[53][54] Currently only 3.8 and later are supported (2023 security issues were fixed in e.g. 3.7.17, the final 3.7.x release[55]). While Python 2.7 and older is officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. ""2.7.18+"" (plus 3.9 and 3.10), with the plus meaning (at least some) ""backported security updates"".[56]","^ ""Python Release Python 3.7.17"". Python.org. Archived from the original on 31 July 2023. Retrieved 18 August 2023."
24,"Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[51][52] No further security patches or other improvements will be released for it.[53][54] Currently only 3.8 and later are supported (2023 security issues were fixed in e.g. 3.7.17, the final 3.7.x release[55]). While Python 2.7 and older is officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. ""2.7.18+"" (plus 3.9 and 3.10), with the plus meaning (at least some) ""backported security updates"".[56]","^ mattip (25 December 2023). ""PyPy v7.3.14 release"". PyPy. Archived from the original on 5 January 2024. Retrieved 5 January 2024."
25,"In 2021 (and again twice in 2022), security updates were expedited, since all Python versions were insecure (including 2.7[57]) because of security issues leading to possible remote code execution[58] and web-cache poisoning.[59] In 2022, Python 3.10.4 and 3.9.12 were expedited[60] and 3.8.13, because of many security issues.[61] When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.[62] On 7 September 2022, four new releases were made due to a potential denial-of-service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.[63][64]","^ ""CVE-2021-3177"". Red Hat Customer Portal. Archived from the original on 6 March 2021. Retrieved 26 February 2021."
26,"In 2021 (and again twice in 2022), security updates were expedited, since all Python versions were insecure (including 2.7[57]) because of security issues leading to possible remote code execution[58] and web-cache poisoning.[59] In 2022, Python 3.10.4 and 3.9.12 were expedited[60] and 3.8.13, because of many security issues.[61] When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.[62] On 7 September 2022, four new releases were made due to a potential denial-of-service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.[63][64]","^ ""CVE-2021-3177"". CVE. Archived from the original on 27 February 2021. Retrieved 26 February 2021."
27,"In 2021 (and again twice in 2022), security updates were expedited, since all Python versions were insecure (including 2.7[57]) because of security issues leading to possible remote code execution[58] and web-cache poisoning.[59] In 2022, Python 3.10.4 and 3.9.12 were expedited[60] and 3.8.13, because of many security issues.[61] When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.[62] On 7 September 2022, four new releases were made due to a potential denial-of-service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.[63][64]","^ ""CVE-2021-23336"". CVE. Archived from the original on 24 February 2021. Retrieved 26 February 2021."
28,"In 2021 (and again twice in 2022), security updates were expedited, since all Python versions were insecure (including 2.7[57]) because of security issues leading to possible remote code execution[58] and web-cache poisoning.[59] In 2022, Python 3.10.4 and 3.9.12 were expedited[60] and 3.8.13, because of many security issues.[61] When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.[62] On 7 September 2022, four new releases were made due to a potential denial-of-service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.[63][64]","^ Langa, Łukasz (24 March 2022). ""Python 3.10.4 and 3.9.12 are now available out of schedule"". Python Insider. Archived from the original on 21 April 2022. Retrieved 19 April 2022."
29,"In 2021 (and again twice in 2022), security updates were expedited, since all Python versions were insecure (including 2.7[57]) because of security issues leading to possible remote code execution[58] and web-cache poisoning.[59] In 2022, Python 3.10.4 and 3.9.12 were expedited[60] and 3.8.13, because of many security issues.[61] When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.[62] On 7 September 2022, four new releases were made due to a potential denial-of-service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.[63][64]","^ Langa, Łukasz (16 March 2022). ""Python 3.10.3, 3.9.11, 3.8.13, and 3.7.13 are now available with security content"". Python Insider. Archived from the original on 17 April 2022. Retrieved 19 April 2022."
30,"In 2021 (and again twice in 2022), security updates were expedited, since all Python versions were insecure (including 2.7[57]) because of security issues leading to possible remote code execution[58] and web-cache poisoning.[59] In 2022, Python 3.10.4 and 3.9.12 were expedited[60] and 3.8.13, because of many security issues.[61] When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.[62] On 7 September 2022, four new releases were made due to a potential denial-of-service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.[63][64]","^ Langa, Łukasz (17 May 2022). ""Python 3.9.13 is now available"". Python Insider. Archived from the original on 17 May 2022. Retrieved 21 May 2022."
31,"In 2021 (and again twice in 2022), security updates were expedited, since all Python versions were insecure (including 2.7[57]) because of security issues leading to possible remote code execution[58] and web-cache poisoning.[59] In 2022, Python 3.10.4 and 3.9.12 were expedited[60] and 3.8.13, because of many security issues.[61] When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.[62] On 7 September 2022, four new releases were made due to a potential denial-of-service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.[63][64]","^ Langa, Łukasz (7 September 2022). ""Python releases 3.10.7, 3.9.14, 3.8.14, and 3.7.14 are now available"". Python Insider. Archived from the original on 13 September 2022. Retrieved 16 September 2022."
32,"In 2021 (and again twice in 2022), security updates were expedited, since all Python versions were insecure (including 2.7[57]) because of security issues leading to possible remote code execution[58] and web-cache poisoning.[59] In 2022, Python 3.10.4 and 3.9.12 were expedited[60] and 3.8.13, because of many security issues.[61] When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.[62] On 7 September 2022, four new releases were made due to a potential denial-of-service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.[63][64]","^ ""CVE-2020-10735"". CVE. Archived from the original on 20 September 2022. Retrieved 16 September 2022."
33,"As of October 2023,[update] Python 3.12 is the stable release, and 3.12 and 3.11 are the only versions with active (as opposed to just security) support. Notable changes in 3.11 from 3.10 include increased program execution speed and improved error reporting.[65]","^ corbet (24 October 2022). ""Python 3.11 released [LWN.net]"". lwn.net. Retrieved 15 November 2022."
34,Every Python release since 3.5 has added some syntax to the language. 3.10 added the | union type operator [66] and the match and case keywords (for structural pattern matching statements). 3.11 expanded exception handling functionality. Python 3.12 added the new keyword type.,"^ ""Built-in Types""."
35,"Since 27 June 2023[update], Python 3.8 is the oldest supported version of Python (albeit in the 'security support' phase), due to Python 3.7 reaching end-of-life.[67]","^ ""Python"". endoflife.date. 10 August 2023. Archived from the original on 18 September 2021. Retrieved 15 August 2023."
36,"Python 3.13 introduced an incremental garbage collector (producing shorter pauses for collection in programs with a lot of objects); an experimental JIT compiler;[68] and removals from the C API. Some standard library modules and many deprecated classes, functions and methods, will be removed in Python 3.15 and or 3.16.[69][70] Starting with 3.13, it and later versions have 2 years of full support (up from one and a half); followed by 3 years of security support (for same total support as before).","^ ""What's New In Python 3.13"". Python documentation. Retrieved 30 April 2024."
37,"Python 3.13 introduced an incremental garbage collector (producing shorter pauses for collection in programs with a lot of objects); an experimental JIT compiler;[68] and removals from the C API. Some standard library modules and many deprecated classes, functions and methods, will be removed in Python 3.15 and or 3.16.[69][70] Starting with 3.13, it and later versions have 2 years of full support (up from one and a half); followed by 3 years of security support (for same total support as before).","^ Wouters, Thomas (9 April 2024). ""Python Insider: Python 3.12.3 and 3.13.0a6 released"". Python Insider. Retrieved 29 April 2024."
38,"Python 3.13 introduced an incremental garbage collector (producing shorter pauses for collection in programs with a lot of objects); an experimental JIT compiler;[68] and removals from the C API. Some standard library modules and many deprecated classes, functions and methods, will be removed in Python 3.15 and or 3.16.[69][70] Starting with 3.13, it and later versions have 2 years of full support (up from one and a half); followed by 3 years of security support (for same total support as before).",^ https://peps.python.org/pep-0594/
39,"Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming[71] and metaobjects).[72] Many other paradigms are supported via extensions, including design by contract[73][74] and logic programming.[75]","^ The Cain Gang Ltd. ""Python Metaclasses: Who? Why? When?"" (PDF). Archived from the original (PDF) on 30 May 2009. Retrieved 27 June 2009."
40,"Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming[71] and metaobjects).[72] Many other paradigms are supported via extensions, including design by contract[73][74] and logic programming.[75]","^ ""3.3. Special method names"". The Python Language Reference. Python Software Foundation. Archived from the original on 15 December 2018. Retrieved 27 June 2009."
41,"Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming[71] and metaobjects).[72] Many other paradigms are supported via extensions, including design by contract[73][74] and logic programming.[75]","^ ""PyDBC: method preconditions, method postconditions and class invariants for Python"". Archived from the original on 23 November 2019. Retrieved 24 September 2011."
42,"Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming[71] and metaobjects).[72] Many other paradigms are supported via extensions, including design by contract[73][74] and logic programming.[75]","^ ""Contracts for Python"". Archived from the original on 15 June 2020. Retrieved 24 September 2011."
43,"Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming[71] and metaobjects).[72] Many other paradigms are supported via extensions, including design by contract[73][74] and logic programming.[75]","^ ""PyDatalog"". Archived from the original on 13 June 2020. Retrieved 22 July 2012."
44,"Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management.[76] It uses dynamic name resolution (late binding), which binds method and variable names during program execution.","^ ""Extending and Embedding the Python Interpreter: Reference Counts"". Docs.python.org. Archived from the original on 18 October 2012. Retrieved 5 June 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting."
45,"Its design offers some support for functional programming in the Lisp tradition. It has filter,mapandreduce functions; list comprehensions, dictionaries, sets, and generator expressions.[77] The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.[78]","^ a b Hettinger, Raymond (30 January 2002). ""PEP 289 – Generator Expressions"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012."
46,"Its design offers some support for functional programming in the Lisp tradition. It has filter,mapandreduce functions; list comprehensions, dictionaries, sets, and generator expressions.[77] The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.[78]","^ ""6.5 itertools – Functions creating iterators for efficient looping"". Docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016."
47,"Its core philosophy is summarized in the Zen of Python (PEP 20), which includes aphorisms such as:[79]","^ a b Peters, Tim (19 August 2004). ""PEP 20 – The Zen of Python"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 26 December 2018. Retrieved 24 November 2008."
48,"However, Python features regularly violate these principles and received criticism for adding unnecessary language bloat.[80][81] Responses to these criticisms are that the Zen of Python is a guideline rather than a rule.[82] The addition of some new features had been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.[83][84]","^ Lutz, Mark (January 2022). ""Python Changes 2014+"". Learning Python. Archived from the original on 15 March 2024. Retrieved 25 February 2024."
49,"However, Python features regularly violate these principles and received criticism for adding unnecessary language bloat.[80][81] Responses to these criticisms are that the Zen of Python is a guideline rather than a rule.[82] The addition of some new features had been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.[83][84]","^ Thomas, Robin (3 May 2023). ""Python is not a great programming language"". GitHub Gist. Archived from the original on 31 December 2023. Retrieved 25 February 2024."
50,"However, Python features regularly violate these principles and received criticism for adding unnecessary language bloat.[80][81] Responses to these criticisms are that the Zen of Python is a guideline rather than a rule.[82] The addition of some new features had been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.[83][84]","^ ""Confusion regarding a rule in The Zen of Python"". Python Help - Discussions on Python.org. 3 May 2022. Archived from the original on 25 February 2024. Retrieved 25 February 2024."
51,"However, Python features regularly violate these principles and received criticism for adding unnecessary language bloat.[80][81] Responses to these criticisms are that the Zen of Python is a guideline rather than a rule.[82] The addition of some new features had been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.[83][84]","^ Ambi, Chetan (4 July 2021). ""The Most Controversial Python Walrus Operator"". Python Simplified. Archived from the original on 27 August 2023. Retrieved 5 February 2024."
52,"However, Python features regularly violate these principles and received criticism for adding unnecessary language bloat.[80][81] Responses to these criticisms are that the Zen of Python is a guideline rather than a rule.[82] The addition of some new features had been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.[83][84]","^ Grifski, Jeremy (24 May 2020). ""The Controversy Behind The Walrus Operator in Python"". The Renegade Coder. Archived from the original on 28 December 2023. Retrieved 25 February 2024."
53,"Nevertheless, rather than building all of its functionality into its core, Python was designed to be highly extensible via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[42]","^ a b Venners, Bill (13 January 2003). ""The Making of Python"". Artima Developer. Artima. Archived from the original on 1 September 2016. Retrieved 22 March 2007."
54,"Python claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to Perl's ""there is more than one way to do it"" motto, Python embraces a ""there should be one—and preferably only one—obvious way to do it."" philosophy.[79] In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use.[85] Alex Martelli, a Fellow at the Python Software Foundation and Python book author, wrote: ""To describe something as 'clever' is not considered a compliment in the Python culture.""[86]","^ a b Peters, Tim (19 August 2004). ""PEP 20 – The Zen of Python"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 26 December 2018. Retrieved 24 November 2008."
55,"Python claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to Perl's ""there is more than one way to do it"" motto, Python embraces a ""there should be one—and preferably only one—obvious way to do it."" philosophy.[79] In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use.[85] Alex Martelli, a Fellow at the Python Software Foundation and Python book author, wrote: ""To describe something as 'clever' is not considered a compliment in the Python culture.""[86]","^ Bader, Dan. ""Python String Formatting Best Practices"". Real Python. Archived from the original on 18 February 2024. Retrieved 25 February 2024."
56,"Python claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to Perl's ""there is more than one way to do it"" motto, Python embraces a ""there should be one—and preferably only one—obvious way to do it."" philosophy.[79] In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use.[85] Alex Martelli, a Fellow at the Python Software Foundation and Python book author, wrote: ""To describe something as 'clever' is not considered a compliment in the Python culture.""[86]","^ Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook, 2nd Edition. O'Reilly Media. p. 230. ISBN 978-0-596-00797-3. Archived from the original on 23 February 2020. Retrieved 14 November 2015."
57,"Python's developers usually strive to avoid premature optimization and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[87] Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages, but it either doesn't provide the full speed-up that might be expected, since Python is a very dynamic language, or a restricted subset of Python is compiled, and possibly semantics are slightly changed.[88]","^ ""Python Culture"". ebeab. 21 January 2014. Archived from the original on 30 January 2014."
58,"Python's developers usually strive to avoid premature optimization and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[87] Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages, but it either doesn't provide the full speed-up that might be expected, since Python is a very dynamic language, or a restricted subset of Python is compiled, and possibly semantics are slightly changed.[88]","^ a b ""Transpiling Python to Julia using PyJL"" (PDF). Archived (PDF) from the original on 19 November 2023. Retrieved 20 September 2023. After manually modifying one line of code by specifying the necessary type information, we obtained a speedup of 52.6×, making the translated Julia code 19.5× faster than the original Python code."
59,"Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group Monty Python[89]—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms ""spam"" and ""eggs"" (a reference to a Monty Python sketch) in examples, instead of the often-used ""foo"" and ""bar"".[90][91] A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. ""Pythonic"" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.[92]","^ ""Why is it called Python?"". General Python FAQ. Docs.python.org. Archived from the original on 24 October 2012. Retrieved 3 January 2023."
60,"Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group Monty Python[89]—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms ""spam"" and ""eggs"" (a reference to a Monty Python sketch) in examples, instead of the often-used ""foo"" and ""bar"".[90][91] A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. ""Pythonic"" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.[92]","^ ""15 Ways Python Is a Powerful Force on the Web"". Archived from the original on 11 May 2019. Retrieved 3 July 2018."
61,"Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group Monty Python[89]—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms ""spam"" and ""eggs"" (a reference to a Monty Python sketch) in examples, instead of the often-used ""foo"" and ""bar"".[90][91] A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. ""Pythonic"" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.[92]","^ ""pprint – Data pretty printer – Python 3.11.0 documentation"". docs.python.org. Archived from the original on 22 January 2021. Retrieved 5 November 2022. stuff=['spam', 'eggs', 'lumberjack', 'knights', 'ni']"
62,"Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group Monty Python[89]—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms ""spam"" and ""eggs"" (a reference to a Monty Python sketch) in examples, instead of the often-used ""foo"" and ""bar"".[90][91] A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. ""Pythonic"" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.[92]","^ ""Code Style – The Hitchhiker's Guide to Python"". docs.python-guide.org. Archived from the original on 27 January 2021. Retrieved 20 January 2021."
63,"Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than C or Pascal.[93]","^ ""Is Python a good language for beginning programmers?"". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 21 March 2007."
64,"Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[94] Thus, the program's visual structure accurately represents its semantic structure.[95] This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.[96]","^ ""Myths about indentation in Python"". Secnetix.de. Archived from the original on 18 February 2018. Retrieved 19 April 2011."
65,"Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[94] Thus, the program's visual structure accurately represents its semantic structure.[95] This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.[96]","^ Guttag, John V. (12 August 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4."
66,"Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[94] Thus, the program's visual structure accurately represents its semantic structure.[95] This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.[96]","^ ""PEP 8 – Style Guide for Python Code"". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019."
67,"Python does not support tail call optimization or first-class continuations, and, according to Van Rossum, it never will.[99][100] However, better support for coroutine-like functionality is provided by extending Python's generators.[101] Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels.[102]","^ van Rossum, Guido (22 April 2009). ""Tail Recursion Elimination"". Neopythonic.blogspot.be. Archived from the original on 19 May 2018. Retrieved 3 December 2012."
68,"Python does not support tail call optimization or first-class continuations, and, according to Van Rossum, it never will.[99][100] However, better support for coroutine-like functionality is provided by extending Python's generators.[101] Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels.[102]","^ van Rossum, Guido (9 February 2006). ""Language Design Is Not Just Solving Puzzles"". Artima forums. Artima. Archived from the original on 17 January 2020. Retrieved 21 March 2007."
69,"Python does not support tail call optimization or first-class continuations, and, according to Van Rossum, it never will.[99][100] However, better support for coroutine-like functionality is provided by extending Python's generators.[101] Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels.[102]","^ van Rossum, Guido; Eby, Phillip J. (10 May 2005). ""PEP 342 – Coroutines via Enhanced Generators"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 29 May 2020. Retrieved 19 February 2012."
70,"Python does not support tail call optimization or first-class continuations, and, according to Van Rossum, it never will.[99][100] However, better support for coroutine-like functionality is provided by extending Python's generators.[101] Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels.[102]","^ ""PEP 380"". Python.org. Archived from the original on 4 June 2020. Retrieved 3 December 2012."
71,"Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self (or this) in some other object-oriented programming languages (e.g., C++, Java, Objective-C, Ruby).[111] Python also provides methods, often called dunder methods (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison, in arithmetic operations and type conversion.[112]","^ ""Why must 'self' be used explicitly in method definitions and calls?"". Design and History FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 19 February 2012."
72,"Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self (or this) in some other object-oriented programming languages (e.g., C++, Java, Objective-C, Ruby).[111] Python also provides methods, often called dunder methods (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison, in arithmetic operations and type conversion.[112]","^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code. No Starch Press. p. 322. ISBN 978-1-59327-966-0. Archived from the original on 13 August 2021. Retrieved 7 July 2021."
73,"Before version 3.0, Python had two kinds of classes (both using the same syntax):  old-style and new-style;[113] current Python versions only support the semantics of the new style.","^ ""The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1"". Archived from the original on 26 October 2012. Retrieved 12 January 2011."
74,"Python supports optional type annotations.[4][114] These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors.[115][116] Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization.[117]","^ a b ""PEP 483 – The Theory of Type Hints"". Python.org. Archived from the original on 14 June 2020. Retrieved 14 June 2018."
75,"Python supports optional type annotations.[4][114] These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors.[115][116] Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization.[117]","^ ""PEP 484 – Type Hints | peps.python.org"". peps.python.org. Archived from the original on 27 November 2023. Retrieved 29 November 2023."
76,"Python supports optional type annotations.[4][114] These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors.[115][116] Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization.[117]","^ ""typing — Support for type hints"". Python documentation. Python Software Foundation. Archived from the original on 21 February 2020. Retrieved 22 December 2023."
77,"Python supports optional type annotations.[4][114] These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors.[115][116] Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization.[117]","^ ""mypy – Optional Static Typing for Python"". Archived from the original on 6 June 2020. Retrieved 28 January 2017."
78,"Python supports optional type annotations.[4][114] These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors.[115][116] Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization.[117]","^ ""Introduction"". mypyc.readthedocs.io. Archived from the original on 22 December 2023. Retrieved 22 December 2023."
79,"Python has the usual symbols for arithmetic operators (+, -, *, /), the floor division operator // and the modulo operation % (where the remainder can be negative, e.g. 4 % -3 == -2). It also has ** for exponentiation, e.g. 5**3 == 125 and 9**0.5 == 3.0, and a matrix‑multiplication operator @ .[121] These operators work like in traditional math; with the same precedence rules, the operators infix (+ and - can also be unary to represent positive and negative numbers respectively).","^ ""PEP 465 – A dedicated infix operator for matrix multiplication"". python.org. Archived from the original on 29 May 2020. Retrieved 3 July 2018."
80,The division between integers produces floating-point results. The behavior of division has changed significantly over time:[122],"^ a b Zadka, Moshe; van Rossum, Guido (11 March 2001). ""PEP 238 – Changing the Division Operator"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 23 October 2013."
81,"In Python terms, / is true division (or simply division), and // is floor division. / before version 3.0 is classic division.[122]","^ a b Zadka, Moshe; van Rossum, Guido (11 March 2001). ""PEP 238 – Changing the Division Operator"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 23 October 2013."
82,"Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation (a + b)//b == a//b + 1 is always true. It also means that the equation b*(a//b) + a%b == a is valid for both positive and negative values of a. However, maintaining the validity of this equation means that while the result of a%b is, as expected, in the half-open interval [0, b), where b is a positive integer, it has to lie in the interval (b, 0] when b is negative.[123]","^ ""Why Python's Integer Division Floors"". 24 August 2010. Archived from the original on 5 June 2020. Retrieved 25 August 2010."
83,"Python provides a round function for rounding a float to the nearest integer. For tie-breaking, Python 3 uses round to even: round(1.5) and round(2.5) both produce 2.[124] Versions before 3 used round-away-from-zero: round(0.5) is 1.0, round(-0.5) is −1.0.[125]","^ ""round"", The Python standard library, release 3.2, §2: Built-in functions, archived from the original on 25 October 2012, retrieved 14 August 2011"
84,"Python provides a round function for rounding a float to the nearest integer. For tie-breaking, Python 3 uses round to even: round(1.5) and round(2.5) both produce 2.[124] Versions before 3 used round-away-from-zero: round(0.5) is 1.0, round(-0.5) is −1.0.[125]","^ ""round"", The Python standard library, release 2.7, §2: Built-in functions, archived from the original on 27 October 2012, retrieved 14 August 2011"
85,"Python allows Boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c.[126] C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c.[127]","^ Beazley, David M. (2009). Python Essential Reference (4th ed.). Addison-Wesley Professional. p. 66. ISBN 9780672329784."
86,"Python allows Boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c.[126] C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c.[127]","^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). p. 206."
87,Python uses arbitrary-precision arithmetic for all integer operations. The Decimal type/class in the decimal module provides decimal floating-point numbers to a pre-defined arbitrary precision and several rounding modes.[128] The Fraction class in the fractions module provides arbitrary precision for rational numbers.[129],"^ a b Batista, Facundo (17 October 2003). ""PEP 327 – Decimal Data Type"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 24 November 2008."
88,Python uses arbitrary-precision arithmetic for all integer operations. The Decimal type/class in the decimal module provides decimal floating-point numbers to a pre-defined arbitrary precision and several rounding modes.[128] The Fraction class in the fractions module provides arbitrary precision for rational numbers.[129],"^ ""What's New in Python 2.6"". Python v2.6.9 documentation. 29 October 2013. Archived from the original on 23 December 2019. Retrieved 26 September 2015."
89,"Due to Python's extensive mathematics library, and the third-party library NumPy that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.[130][131]","^ ""10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) – Hoyt Koepke"". University of Washington Department of Statistics. Archived from the original on 31 May 2020. Retrieved 3 February 2019."
90,"Due to Python's extensive mathematics library, and the third-party library NumPy that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.[130][131]","^ Shell, Scott (17 June 2014). ""An introduction to Python for scientific computing"" (PDF). Archived (PDF) from the original on 4 February 2019. Retrieved 3 February 2019."
91,"Python's large standard library[132] provides tools suited to many tasks and is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. It includes modules for creating graphical user interfaces, connecting to relational databases, generating pseudorandom numbers, arithmetic with arbitrary-precision decimals,[128] manipulating regular expressions, and unit testing.","^ Piotrowski, Przemyslaw (July 2006). ""Build a Rapid Web Development Environment for Python Server Pages and Oracle"". Oracle Technology Network. Oracle. Archived from the original on 2 April 2019. Retrieved 12 March 2012."
92,"Python's large standard library[132] provides tools suited to many tasks and is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. It includes modules for creating graphical user interfaces, connecting to relational databases, generating pseudorandom numbers, arithmetic with arbitrary-precision decimals,[128] manipulating regular expressions, and unit testing.","^ a b Batista, Facundo (17 October 2003). ""PEP 327 – Decimal Data Type"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 24 November 2008."
93,"Some parts of the standard library are covered by specifications—for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333[133]—but most are specified by their code, internal documentation, and test suites. However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.","^ Eby, Phillip J. (7 December 2003). ""PEP 333 – Python Web Server Gateway Interface v1.0"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012."
94,"As of 17 March 2024,[update] the Python Package Index (PyPI), the official repository for third-party Python software, contains over 523,000[134] packages with a wide range of functionality, including:","^ ""PyPI"". PyPI. 17 March 2024. Archived from the original on 17 March 2024."
95,"As well as standard desktop integrated development environments including PyCharm, IntelliJ Idea, Visual Studio Code etc, there are web browser-based IDEs, including SageMath, for developing science- and math-related programs; PythonAnywhere, a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE emphasizing scientific computing.[135]","^ Enthought, Canopy. ""Canopy"". www.enthought.com. Archived from the original on 15 July 2017. Retrieved 20 August 2016."
96,"CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)","^ ""PEP 7 – Style Guide for C Code | peps.python.org"". peps.python.org. Archived from the original on 24 April 2022. Retrieved 28 April 2022."
97,"CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)","^ ""4. Building C and C++ Extensions – Python 3.9.2 documentation"". docs.python.org. Archived from the original on 3 March 2021. Retrieved 1 March 2021."
98,"CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)","^ van Rossum, Guido (5 June 2001). ""PEP 7 – Style Guide for C Code"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 1 June 2020. Retrieved 24 November 2008."
99,"CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)","^ ""CPython byte code"". Docs.python.org. Archived from the original on 5 June 2020. Retrieved 16 February 2016."
100,"CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)","^ ""Python 2.5 internals"" (PDF). Archived (PDF) from the original on 6 August 2012. Retrieved 19 April 2011."
101,"CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)","^ ""Changelog – Python 3.9.0 documentation"". docs.python.org. Archived from the original on 7 February 2021. Retrieved 8 February 2021."
102,"CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)","^ ""Download Python"". Python.org. Archived from the original on 8 December 2020. Retrieved 13 December 2020."
103,"CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)","^ ""history [vmspython]"". www.vmspython.org. Archived from the original on 2 December 2020. Retrieved 4 December 2020."
104,"CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)","^ ""An Interview with Guido van Rossum"". Oreilly.com. Archived from the original on 16 July 2014. Retrieved 24 November 2008."
105,"CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)","^ ""Download Python for Other Platforms"". Python.org. Archived from the original on 27 November 2020. Retrieved 4 December 2020."
106,Performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13.[173] Python's performance compared to other programming languages is also benchmarked by The Computer Language Benchmarks Game.[174],"^ Murri, Riccardo (2013). Performance of Python runtimes on a non-numeric scientific code. European Conference on Python in Science (EuroSciPy). arXiv:1404.6388. Bibcode:2014arXiv1404.6388M."
107,Performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13.[173] Python's performance compared to other programming languages is also benchmarked by The Computer Language Benchmarks Game.[174],"^ ""The Computer Language Benchmarks Game"". Archived from the original on 14 June 2020. Retrieved 30 April 2020."
108,"Python's development is conducted largely through the Python Enhancement Proposal (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions.[175] Python coding style is covered in PEP 8.[176] Outstanding PEPs are reviewed and commented on by the Python community and the steering council.[175]","^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). ""PEP 1 – PEP Purpose and Guidelines"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 19 April 2011."
109,"Python's development is conducted largely through the Python Enhancement Proposal (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions.[175] Python coding style is covered in PEP 8.[176] Outstanding PEPs are reviewed and commented on by the Python community and the steering council.[175]","^ ""PEP 8 – Style Guide for Python Code"". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019."
110,"Python's development is conducted largely through the Python Enhancement Proposal (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions.[175] Python coding style is covered in PEP 8.[176] Outstanding PEPs are reviewed and commented on by the Python community and the steering council.[175]","^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). ""PEP 1 – PEP Purpose and Guidelines"". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 19 April 2011."
111,"Enhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the Roundup bug tracker hosted at by the foundation.[177] In 2022, all issues and discussions were migrated to GitHub.[178] Development originally took place on a self-hosted source-code repository running Mercurial, until Python moved to GitHub in January 2017.[179]","^ Cannon, Brett. ""Guido, Some Guys, and a Mailing List: How Python is Developed"". python.org. Python Software Foundation. Archived from the original on 1 June 2009. Retrieved 27 June 2009."
112,"Enhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the Roundup bug tracker hosted at by the foundation.[177] In 2022, all issues and discussions were migrated to GitHub.[178] Development originally took place on a self-hosted source-code repository running Mercurial, until Python moved to GitHub in January 2017.[179]","^ ""Moving Python's bugs to GitHub [LWN.net]"". Archived from the original on 2 October 2022. Retrieved 2 October 2022."
113,"Enhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the Roundup bug tracker hosted at by the foundation.[177] In 2022, all issues and discussions were migrated to GitHub.[178] Development originally took place on a self-hosted source-code repository running Mercurial, until Python moved to GitHub in January 2017.[179]","^ ""Python Developer's Guide – Python Developer's Guide"". devguide.python.org. Archived from the original on 9 November 2020. Retrieved 17 December 2019."
114,"Many alpha, beta, and release-candidates are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large unit test suite during development.[185]","^ ""Python Buildbot"". Python Developer's Guide. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 September 2011."
115,"Python 3.12 removed wstr meaning Python extensions[186] need to be modified,[187] and 3.10 added pattern matching to the language.[188]","^ ""1. Extending Python with C or C++ – Python 3.9.1 documentation"". docs.python.org. Archived from the original on 23 June 2020. Retrieved 14 February 2021."
116,"Python 3.12 removed wstr meaning Python extensions[186] need to be modified,[187] and 3.10 added pattern matching to the language.[188]","^ ""PEP 623 – Remove wstr from Unicode"". Python.org. Archived from the original on 5 March 2021. Retrieved 14 February 2021."
117,"Python 3.12 removed wstr meaning Python extensions[186] need to be modified,[187] and 3.10 added pattern matching to the language.[188]","^ ""PEP 634 – Structural Pattern Matching: Specification"". Python.org. Archived from the original on 6 May 2021. Retrieved 14 February 2021."
118,"Tools that can generate documentation for Python API include pydoc (available as part of the standard library), Sphinx, Pdoc and its forks, Doxygen and Graphviz, among others.[189]","^ ""Documentation Tools"". Python.org. Archived from the original on 11 November 2020. Retrieved 22 March 2021."
119,"Python's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;[190] for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar.[190][191] The official Python documentation also contains various references to Monty Python routines.[192][193] Users of Python are sometimes referred to as ""Pythonistas"".[194]","^ a b ""Whetting Your Appetite"". The Python Tutorial. Python Software Foundation. Archived from the original on 26 October 2012. Retrieved 20 February 2012."
120,"Python's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;[190] for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar.[190][191] The official Python documentation also contains various references to Monty Python routines.[192][193] Users of Python are sometimes referred to as ""Pythonistas"".[194]","^ a b ""Whetting Your Appetite"". The Python Tutorial. Python Software Foundation. Archived from the original on 26 October 2012. Retrieved 20 February 2012."
121,"Python's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;[190] for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar.[190][191] The official Python documentation also contains various references to Monty Python routines.[192][193] Users of Python are sometimes referred to as ""Pythonistas"".[194]","^ ""In Python, should I use else after a return in an if block?"". Stack Overflow. Stack Exchange. 17 February 2011. Archived from the original on 20 June 2019. Retrieved 6 May 2011."
122,"Python's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;[190] for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar.[190][191] The official Python documentation also contains various references to Monty Python routines.[192][193] Users of Python are sometimes referred to as ""Pythonistas"".[194]","^ Lutz, Mark (2009). Learning Python: Powerful Object-Oriented Programming. O'Reilly Media, Inc. p. 17. ISBN 9781449379322. Archived from the original on 17 July 2017. Retrieved 9 May 2017."
123,"Python's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;[190] for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar.[190][191] The official Python documentation also contains various references to Monty Python routines.[192][193] Users of Python are sometimes referred to as ""Pythonistas"".[194]","^ Fehily, Chris (2002). Python. Peachpit Press. p. xv. ISBN 9780201748840. Archived from the original on 17 July 2017. Retrieved 9 May 2017."
124,"Python's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;[190] for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar.[190][191] The official Python documentation also contains various references to Monty Python routines.[192][193] Users of Python are sometimes referred to as ""Pythonistas"".[194]","^ Lubanovic, Bill (2014). Introducing Python. Sebastopol, CA : O'Reilly Media. p. 305. ISBN 978-1-4493-5936-2. Retrieved 31 July 2023."
125,"Since 2003, Python has consistently ranked in the top ten most popular programming languages in the TIOBE Programming Community Index where as of December 2022[update] it was the most popular language (ahead of C, C++, and Java).[40] It was selected as Programming Language of the Year (for ""the highest rise in ratings in a year"") in 2007, 2010, 2018, and 2020 (the only language to have done so four times as of 2020[update][195]).","^ a b ""TIOBE Index"". TIOBE. Archived from the original on 25 February 2018. Retrieved 3 January 2023. The TIOBE Programming Community index is an indicator of the popularity of programming languages Updated as required."
126,"Since 2003, Python has consistently ranked in the top ten most popular programming languages in the TIOBE Programming Community Index where as of December 2022[update] it was the most popular language (ahead of C, C++, and Java).[40] It was selected as Programming Language of the Year (for ""the highest rise in ratings in a year"") in 2007, 2010, 2018, and 2020 (the only language to have done so four times as of 2020[update][195]).","^ Blake, Troy (18 January 2021). ""TIOBE Index for January 2021"". Technology News and Information by SeniorDBA. Archived from the original on 21 March 2021. Retrieved 26 February 2021."
127,"Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like ILM[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205]","^ ""Quotes about Python"". Python Software Foundation. Archived from the original on 3 June 2020. Retrieved 8 January 2012."
128,"Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like ILM[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205]","^ ""Organizations Using Python"". Python Software Foundation. Archived from the original on 21 August 2018. Retrieved 15 January 2009."
129,"Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like ILM[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205]","^ ""Python : the holy grail of programming"". CERN Bulletin (31/2006). CERN Publications. 31 July 2006. Archived from the original on 15 January 2013. Retrieved 11 February 2012."
130,"Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like ILM[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205]","^ Shafer, Daniel G. (17 January 2003). ""Python Streamlines Space Shuttle Mission Design"". Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 November 2008."
131,"Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like ILM[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205]","^ ""Tornado: Facebook's Real-Time Web Framework for Python – Facebook for Developers"". Facebook for Developers. Archived from the original on 19 February 2019. Retrieved 19 June 2018."
132,"Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like ILM[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205]","^ ""What Powers Instagram: Hundreds of Instances, Dozens of Technologies"". Instagram Engineering. 11 December 2016. Archived from the original on 15 June 2020. Retrieved 27 May 2019."
133,"Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like ILM[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205]","^ ""How we use Python at Spotify"". Spotify Labs. 20 March 2013. Archived from the original on 10 June 2020. Retrieved 25 July 2018."
134,"Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like ILM[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205]","^ Fortenberry, Tim (17 January 2003). ""Industrial Light & Magic Runs on Python"". Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 11 February 2012."
135,"Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like ILM[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205]","^ Taft, Darryl K. (5 March 2007). ""Python Slithers into Systems"". eWeek.com. Ziff Davis Holdings. Archived from the original on 13 August 2021. Retrieved 24 September 2011."
136,"Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like ILM[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205]","^ GitHub – reddit-archive/reddit: historical code from reddit.com., The Reddit Archives, archived from the original on 1 June 2020, retrieved 20 March 2019"
137,"Python can serve as a scripting language for web applications, e.g. via mod_wsgi for the Apache webserver.[206] With Web Server Gateway Interface, a standard API has evolved to facilitate these applications. Web frameworks like Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle, and Zope support developers in the design and maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as a data mapper to a relational database. Twisted is a framework to program communications between computers, and is used (for example) by Dropbox.","^ ""Usage statistics and market share of Python for websites"". 2012. Archived from the original on 13 August 2021. Retrieved 18 December 2012."
138,"Libraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing,[207][208] with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra system with a notebook interface programmable in Python: its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus.[209] OpenCV has Python bindings with a rich set of features for computer vision and image processing.[210]","^ Oliphant, Travis (2007). ""Python for Scientific Computing"". Computing in Science and Engineering. 9 (3): 10–20. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58. ISSN 1521-9615. S2CID 206457124. Archived from the original on 15 June 2020. Retrieved 10 April 2015."
139,"Libraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing,[207][208] with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra system with a notebook interface programmable in Python: its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus.[209] OpenCV has Python bindings with a rich set of features for computer vision and image processing.[210]","^ Millman, K. Jarrod; Aivazis, Michael (2011). ""Python for Scientists and Engineers"". Computing in Science and Engineering. 13 (2): 9–12. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36. Archived from the original on 19 February 2019. Retrieved 7 July 2014."
140,"Libraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing,[207][208] with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra system with a notebook interface programmable in Python: its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus.[209] OpenCV has Python bindings with a rich set of features for computer vision and image processing.[210]","^ Science education with SageMath, Innovative Computing in Science Education, archived from the original on 15 June 2020, retrieved 22 April 2019"
141,"Libraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing,[207][208] with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra system with a notebook interface programmable in Python: its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus.[209] OpenCV has Python bindings with a rich set of features for computer vision and image processing.[210]","^ ""OpenCV: OpenCV-Python Tutorials"". docs.opencv.org. Archived from the original on 23 September 2020. Retrieved 14 September 2020."
142,"Python is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog.[211][212][213][214][215] As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing.[216]","^ Dean, Jeff; Monga, Rajat; et al. (9 November 2015). ""TensorFlow: Large-scale machine learning on heterogeneous systems"" (PDF). TensorFlow.org. Google Research. Archived (PDF) from the original on 20 November 2015. Retrieved 10 November 2015."
143,"Python is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog.[211][212][213][214][215] As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing.[216]","^ Piatetsky, Gregory. ""Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis"". KDnuggets. Archived from the original on 15 November 2019. Retrieved 30 May 2018."
144,"Python is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog.[211][212][213][214][215] As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing.[216]","^ ""Who is using scikit-learn? – scikit-learn 0.20.1 documentation"". scikit-learn.org. Archived from the original on 6 May 2020. Retrieved 30 November 2018."
145,"Python is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog.[211][212][213][214][215] As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing.[216]","^ Jouppi, Norm. ""Google supercharges machine learning tasks with TPU custom chip"". Google Cloud Platform Blog. Archived from the original on 18 May 2016. Retrieved 19 May 2016."
146,"Python is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog.[211][212][213][214][215] As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing.[216]","^ De Raedt, Luc; Kimmig, Angelika (2015). ""Probabilistic (logic) programming concepts"". Machine Learning. 100 (1): 5–47. doi:10.1007/s10994-015-5494-z. S2CID 3166992."
147,"Python is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog.[211][212][213][214][215] As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing.[216]","^ ""Natural Language Toolkit – NLTK 3.5b1 documentation"". www.nltk.org. Archived from the original on 13 June 2020. Retrieved 10 April 2020."
148,"The combination of Python and Prolog has proved to be particularly useful for AI applications, with Prolog providing knowledge representation and reasoning capablities. The Janus system, in particular, exploits the similarites between these two languages,
in part because of their use of dynamic typing, and the simple recursive nature of their
data structures. Typical applications of this combination include  natural language processing, visual query
answering, geospatial reasoning, and handling of semantic web data.[217][218]
The Natlog system, implemented in Python, uses Definite Clause Grammars (DCGs) as prompt generators for text-to-text generators like GPT3 and text-to-image generators like DALL-E or Stable Diffusion.[219]","^ Andersen, C. and Swift, T., 2023. The Janus System: a bridge to new prolog applications. In Prolog: The Next 50 Years (pp. 93-104). Cham: Springer Nature Switzerland."
149,"The combination of Python and Prolog has proved to be particularly useful for AI applications, with Prolog providing knowledge representation and reasoning capablities. The Janus system, in particular, exploits the similarites between these two languages,
in part because of their use of dynamic typing, and the simple recursive nature of their
data structures. Typical applications of this combination include  natural language processing, visual query
answering, geospatial reasoning, and handling of semantic web data.[217][218]
The Natlog system, implemented in Python, uses Definite Clause Grammars (DCGs) as prompt generators for text-to-text generators like GPT3 and text-to-image generators like DALL-E or Stable Diffusion.[219]","^ ""SWI-Prolog Python interface"". Archived from the original on 15 March 2024. Retrieved 15 March 2024."
150,"The combination of Python and Prolog has proved to be particularly useful for AI applications, with Prolog providing knowledge representation and reasoning capablities. The Janus system, in particular, exploits the similarites between these two languages,
in part because of their use of dynamic typing, and the simple recursive nature of their
data structures. Typical applications of this combination include  natural language processing, visual query
answering, geospatial reasoning, and handling of semantic web data.[217][218]
The Natlog system, implemented in Python, uses Definite Clause Grammars (DCGs) as prompt generators for text-to-text generators like GPT3 and text-to-image generators like DALL-E or Stable Diffusion.[219]","^ Tarau, P., 2023. Reflections on automation, learnability and expressiveness in logic-based programming languages. In Prolog: The Next 50 Years (pp. 359-371). Cham: Springer Nature Switzerland."
151,Python can also be used for graphical user interface (GUI) by using libraries like Tkinter.[220][221],"^ ""Tkinter — Python interface to TCL/Tk"". Archived from the original on 18 October 2012. Retrieved 9 June 2023."
152,Python can also be used for graphical user interface (GUI) by using libraries like Tkinter.[220][221],"^ ""Python Tkinter Tutorial"". 3 June 2020. Archived from the original on 9 June 2023. Retrieved 9 June 2023."
153,"Python has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP,[222] Inkscape, Scribus and Paint Shop Pro,[223] and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS.[224] It has also been used in several video games,[225][226] and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.[227]","^ ""Installers for GIMP for Windows – Frequently Asked Questions"". 26 July 2013. Archived from the original on 17 July 2013. Retrieved 26 July 2013."
154,"Python has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP,[222] Inkscape, Scribus and Paint Shop Pro,[223] and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS.[224] It has also been used in several video games,[225][226] and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.[227]","^ ""jasc psp9components"". Archived from the original on 19 March 2008."
155,"Python has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP,[222] Inkscape, Scribus and Paint Shop Pro,[223] and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS.[224] It has also been used in several video games,[225][226] and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.[227]","^ ""About getting started with writing geoprocessing scripts"". ArcGIS Desktop Help 9.2. Environmental Systems Research Institute. 17 November 2006. Archived from the original on 5 June 2020. Retrieved 11 February 2012."
156,"Python has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP,[222] Inkscape, Scribus and Paint Shop Pro,[223] and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS.[224] It has also been used in several video games,[225][226] and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.[227]","^ CCP porkbelly (24 August 2010). ""Stackless Python 2.7"". EVE Community Dev Blogs. CCP Games. Archived from the original on 11 January 2014. Retrieved 11 January 2014. As you may know, EVE has at its core the programming language known as Stackless Python."
157,"Python has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP,[222] Inkscape, Scribus and Paint Shop Pro,[223] and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS.[224] It has also been used in several video games,[225][226] and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.[227]","^ Caudill, Barry (20 September 2005). ""Modding Sid Meier's Civilization IV"". Sid Meier's Civilization IV Developer Blog. Firaxis Games. Archived from the original on 2 December 2010. we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it."
158,"Python has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP,[222] Inkscape, Scribus and Paint Shop Pro,[223] and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS.[224] It has also been used in several video games,[225][226] and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.[227]","^ ""Python Language Guide (v1.0)"". Google Documents List Data API v1.0. Archived from the original on 15 July 2010."
159,"Many operating systems include Python as a standard component. It ships with most Linux distributions,[228] AmigaOS 4 (using Python 2.7), FreeBSD (as a package), NetBSD, and OpenBSD (as a package) and can be used from the command line (terminal). Many Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora Linux use the Anaconda installer. Gentoo Linux uses Python in its package management system, Portage.","^ ""Python Setup and Usage"". Python Software Foundation. Archived from the original on 17 June 2020. Retrieved 10 January 2020."
160,"Python is used extensively in the information security industry, including in exploit development.[229][230]","^ ""Immunity: Knowing You're Secure"". Archived from the original on 16 February 2009."
161,"Python is used extensively in the information security industry, including in exploit development.[229][230]","^ ""Core Security"". Core Security. Archived from the original on 9 June 2020. Retrieved 10 April 2020."
162,"Most of the Sugar software for the One Laptop per Child XO, developed at Sugar Labs as of 2008[update], is written in Python.[231] The Raspberry Pi single-board computer project has adopted Python as its main user-programming language.","^ ""What is Sugar?"". Sugar Labs. Archived from the original on 9 January 2009. Retrieved 11 February 2012."
163,LibreOffice includes Python and intends to replace Java with Python. Its Python Scripting Provider is a core feature[232] since Version 4.0 from 7 February 2013.,"^ ""4.0 New Features and Fixes"". LibreOffice.org. The Document Foundation. 2013. Archived from the original on 9 February 2014. Retrieved 25 February 2013."
164,"Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in Tcl,[245] Erlang,[246] and Swift.[247]","^ Kupries, Andreas; Fellows, Donal K. (14 September 2000). ""TIP #3: TIP Format"". tcl.tk. Tcl Developer Xchange. Archived from the original on 13 July 2017. Retrieved 24 November 2008."
165,"Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in Tcl,[245] Erlang,[246] and Swift.[247]","^ Gustafsson, Per; Niskanen, Raimo (29 January 2007). ""EEP 1: EEP Purpose and Guidelines"". erlang.org. Archived from the original on 15 June 2020. Retrieved 19 April 2011."
166,"Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in Tcl,[245] Erlang,[246] and Swift.[247]","^ ""Swift Evolution Process"". Swift Programming Language Evolution repository on GitHub. 18 February 2020. Archived from the original on 27 April 2020. Retrieved 27 April 2020."
